/*
 * File: app/controller/Tasks.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TouchCRUD.controller.Tasks', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            main: 'taskview',
            list: 'taskview #list',
            details: 'taskview #details',
            form: 'taskview #form',
            backButton: 'taskview #backButton',
            addButton: 'taskview #addButton',
            editButton: 'taskview #editButton',
            removeButton: 'taskview #removeButton'
        },

        control: {
            "taskview #list": {
                select: 'select'
            },
            "taskview #editButton": {
                tap: 'edit'
            },
            "taskview #addButton": {
                tap: 'add'
            },
            "taskview #saveButton": {
                tap: 'save'
            },
            "taskview #removeButton": {
                tap: 'remove'
            },
            "taskview #backButton": {
                tap: 'back'
            },
            "taskview > *": {
                show: 'setButtons'
            }
        }
    },

    select: function(dataview, record, eOpts) {
        // Show details with selected record
        this.showView('details', record);
    },

    edit: function(target) {
        // Show form with selected record
        this.showView('form', this.getSelection());
    },

    add: function(button, e, eOpts) {
        // Remove current selection
        this.getList().deselectAll();

        // Show form with new record
        this.showView('form', Ext.create('model.task'));
    },

    save: function(button, e, eOpts) {
        var form = this.getForm(),
            record = form.getRecord(),
            store = Ext.getStore('Tasks');

        // Update associated record with form values
        form.updateRecord(record);

        // Run validation
        var errors = record.validate();

        // Valid
        if (errors.isValid()) {

            // Add to store if new record
            if (record.phantom) {

                // TODO: Assign the record's ID from data source
                // Normally, this value would be auto-generated,
                // or returned from the server
                var id = store.getData().all.length + 1;
                record.set('id', id);

                // Add to store
                store.add(record);

            }

            // Commit changes
            store.sync();

        }

        // Back to list
        this.reset(record);
    },

    remove: function(button, e, eOpts) {
        var me = this,
            title = 'Delete Task',
            message = 'Are you sure you want to delete this task?';

        // Show confirmation message
        Ext.Msg.confirm(title, message, function(response) {
            if (response == 'yes') {

        // Remove record
        		var store = Ext.getStore('Tasks'),
            record = me.getSelection();
        		store.remove(record);

        		// Back to list view
        		me.reset();

            }
        });
    },

    back: function(target) {
        // Slide back 1 view
        this.getMain().animateActiveItem(-1, { type: 'slide', direction: 'right' });
    },

    setButtons: function(component, eOpts) {
        // Show/hide buttons based on view

        var back = this.getBackButton(),
            add = this.getAddButton(),
            edit = this.getEditButton(),
            remove = this.getRemoveButton();

        switch (component.getItemId()) {
            case 'list':
                back.hide();
                add.show();
                edit.hide();
                remove.hide();
                break;
            case 'details':
                back.show();
                add.hide();
                edit.show();
                remove.show();
                break;
            case 'form':
                back.show();
                add.hide();
                edit.hide();
                remove.hide();
                break;
        }

    },

    reset: function(record) {
        var main = this.getMain(),
            list = this.getList();

        // Slide back to list view
        main.animateActiveItem(list, { type: 'slide', direction: 'right' });

        // Select record if provided
        // Deleselect current, and prevent event from firing
        if (record) {
            list.select(record, false, true);
        }
    },

    showView: function(itemId, record) {
        var main = this.getMain(),
            active = main.down('#' + itemId);
        main.setActiveItem(active);
        if (record) {
            active.setRecord(record);
        }
    },

    getSelection: function() {
        return this.getList().getSelection()[0];
    }

});